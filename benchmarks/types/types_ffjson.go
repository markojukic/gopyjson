// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: types/types.go

package types

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *BinanceAggTrade) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *BinanceAggTrade) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"a":`)
	fflib.FormatBits2(buf, uint64(j.A), 10, j.A < 0)
	buf.WriteString(`,"p":`)
	fflib.WriteJsonString(buf, string(j.P))
	buf.WriteString(`,"q":`)
	fflib.WriteJsonString(buf, string(j.Q))
	buf.WriteString(`,"f":`)
	fflib.FormatBits2(buf, uint64(j.F), 10, j.F < 0)
	buf.WriteString(`,"l":`)
	fflib.FormatBits2(buf, uint64(j.L), 10, j.L < 0)
	buf.WriteString(`,"T":`)
	fflib.FormatBits2(buf, uint64(j.T), 10, j.T < 0)
	if j.M {
		buf.WriteString(`,"m":true`)
	} else {
		buf.WriteString(`,"m":false`)
	}
	if j.M2 {
		buf.WriteString(`,"M":true`)
	} else {
		buf.WriteString(`,"M":false`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtBinanceAggTradebase = iota
	ffjtBinanceAggTradenosuchkey

	ffjtBinanceAggTradeA

	ffjtBinanceAggTradeP

	ffjtBinanceAggTradeQ

	ffjtBinanceAggTradeF

	ffjtBinanceAggTradeL

	ffjtBinanceAggTradeT

	ffjtBinanceAggTradeM

	ffjtBinanceAggTradeM2
)

var ffjKeyBinanceAggTradeA = []byte("a")

var ffjKeyBinanceAggTradeP = []byte("p")

var ffjKeyBinanceAggTradeQ = []byte("q")

var ffjKeyBinanceAggTradeF = []byte("f")

var ffjKeyBinanceAggTradeL = []byte("l")

var ffjKeyBinanceAggTradeT = []byte("T")

var ffjKeyBinanceAggTradeM = []byte("m")

var ffjKeyBinanceAggTradeM2 = []byte("M")

// UnmarshalJSON umarshall json - template of ffjson
func (j *BinanceAggTrade) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *BinanceAggTrade) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtBinanceAggTradebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtBinanceAggTradenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'M':

					if bytes.Equal(ffjKeyBinanceAggTradeM2, kn) {
						currentKey = ffjtBinanceAggTradeM2
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'T':

					if bytes.Equal(ffjKeyBinanceAggTradeT, kn) {
						currentKey = ffjtBinanceAggTradeT
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'a':

					if bytes.Equal(ffjKeyBinanceAggTradeA, kn) {
						currentKey = ffjtBinanceAggTradeA
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffjKeyBinanceAggTradeF, kn) {
						currentKey = ffjtBinanceAggTradeF
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyBinanceAggTradeL, kn) {
						currentKey = ffjtBinanceAggTradeL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeyBinanceAggTradeM, kn) {
						currentKey = ffjtBinanceAggTradeM
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyBinanceAggTradeP, kn) {
						currentKey = ffjtBinanceAggTradeP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'q':

					if bytes.Equal(ffjKeyBinanceAggTradeQ, kn) {
						currentKey = ffjtBinanceAggTradeQ
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyBinanceAggTradeM2, kn) {
					currentKey = ffjtBinanceAggTradeM2
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBinanceAggTradeM, kn) {
					currentKey = ffjtBinanceAggTradeM
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBinanceAggTradeT, kn) {
					currentKey = ffjtBinanceAggTradeT
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBinanceAggTradeL, kn) {
					currentKey = ffjtBinanceAggTradeL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBinanceAggTradeF, kn) {
					currentKey = ffjtBinanceAggTradeF
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBinanceAggTradeQ, kn) {
					currentKey = ffjtBinanceAggTradeQ
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBinanceAggTradeP, kn) {
					currentKey = ffjtBinanceAggTradeP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBinanceAggTradeA, kn) {
					currentKey = ffjtBinanceAggTradeA
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtBinanceAggTradenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtBinanceAggTradeA:
					goto handle_A

				case ffjtBinanceAggTradeP:
					goto handle_P

				case ffjtBinanceAggTradeQ:
					goto handle_Q

				case ffjtBinanceAggTradeF:
					goto handle_F

				case ffjtBinanceAggTradeL:
					goto handle_L

				case ffjtBinanceAggTradeT:
					goto handle_T

				case ffjtBinanceAggTradeM:
					goto handle_M

				case ffjtBinanceAggTradeM2:
					goto handle_M2

				case ffjtBinanceAggTradenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_A:

	/* handler: j.A type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.A = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_P:

	/* handler: j.P type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.P = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Q:

	/* handler: j.Q type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Q = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_F:

	/* handler: j.F type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.F = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_L:

	/* handler: j.L type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.L = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_T:

	/* handler: j.T type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.T = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_M:

	/* handler: j.M type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.M = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.M = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_M2:

	/* handler: j.M2 type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.M2 = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.M2 = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *FtxOrderbook) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *FtxOrderbook) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"channel":`)
	fflib.WriteJsonString(buf, string(j.Channel))
	buf.WriteString(`,"market":`)
	fflib.WriteJsonString(buf, string(j.Market))
	buf.WriteString(`,"type":`)
	fflib.WriteJsonString(buf, string(j.Type))
	/* Inline struct. type=struct { Time float64 "json:\"time\""; Checksum int64 "json:\"checksum\""; Bids [][2]float64 "json:\"bids\""; Asks [][2]float64 "json:\"asks\""; Action string "json:\"action\"" } kind=struct */
	buf.WriteString(`,"data":{ "time":`)
	fflib.AppendFloat(buf, float64(j.Data.Time), 'g', -1, 64)
	buf.WriteString(`,"checksum":`)
	fflib.FormatBits2(buf, uint64(j.Data.Checksum), 10, j.Data.Checksum < 0)
	buf.WriteString(`,"bids":`)
	if j.Data.Bids != nil {
		buf.WriteString(`[`)
		for i, v := range j.Data.Bids {
			if i != 0 {
				buf.WriteString(`,`)
			}
			buf.WriteString(`[`)
			for i, v := range v {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.AppendFloat(buf, float64(v), 'g', -1, 64)
			}
			buf.WriteString(`]`)
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"asks":`)
	if j.Data.Asks != nil {
		buf.WriteString(`[`)
		for i, v := range j.Data.Asks {
			if i != 0 {
				buf.WriteString(`,`)
			}
			buf.WriteString(`[`)
			for i, v := range v {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.AppendFloat(buf, float64(v), 'g', -1, 64)
			}
			buf.WriteString(`]`)
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"action":`)
	fflib.WriteJsonString(buf, string(j.Data.Action))
	buf.WriteByte('}')
	buf.WriteByte('}')
	return nil
}

const (
	ffjtFtxOrderbookbase = iota
	ffjtFtxOrderbooknosuchkey

	ffjtFtxOrderbookChannel

	ffjtFtxOrderbookMarket

	ffjtFtxOrderbookType

	ffjtFtxOrderbookData
)

var ffjKeyFtxOrderbookChannel = []byte("channel")

var ffjKeyFtxOrderbookMarket = []byte("market")

var ffjKeyFtxOrderbookType = []byte("type")

var ffjKeyFtxOrderbookData = []byte("data")

// UnmarshalJSON umarshall json - template of ffjson
func (j *FtxOrderbook) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *FtxOrderbook) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtFtxOrderbookbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtFtxOrderbooknosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyFtxOrderbookChannel, kn) {
						currentKey = ffjtFtxOrderbookChannel
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffjKeyFtxOrderbookData, kn) {
						currentKey = ffjtFtxOrderbookData
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeyFtxOrderbookMarket, kn) {
						currentKey = ffjtFtxOrderbookMarket
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyFtxOrderbookType, kn) {
						currentKey = ffjtFtxOrderbookType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyFtxOrderbookData, kn) {
					currentKey = ffjtFtxOrderbookData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyFtxOrderbookType, kn) {
					currentKey = ffjtFtxOrderbookType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyFtxOrderbookMarket, kn) {
					currentKey = ffjtFtxOrderbookMarket
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyFtxOrderbookChannel, kn) {
					currentKey = ffjtFtxOrderbookChannel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtFtxOrderbooknosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtFtxOrderbookChannel:
					goto handle_Channel

				case ffjtFtxOrderbookMarket:
					goto handle_Market

				case ffjtFtxOrderbookType:
					goto handle_Type

				case ffjtFtxOrderbookData:
					goto handle_Data

				case ffjtFtxOrderbooknosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Channel:

	/* handler: j.Channel type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Channel = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Market:

	/* handler: j.Market type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Market = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Data:

	/* handler: j.Data type=struct { Time float64 "json:\"time\""; Checksum int64 "json:\"checksum\""; Bids [][2]float64 "json:\"bids\""; Asks [][2]float64 "json:\"asks\""; Action string "json:\"action\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { Time float64 "json:\"time\""; Checksum int64 "json:\"checksum\""; Bids [][2]float64 "json:\"bids\""; Asks [][2]float64 "json:\"asks\""; Action string "json:\"action\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Data)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
